{"version":3,"sources":["errors.middleware.js"],"names":["ConnectionTimedOutError","ValidationError","DatabaseError","ConnectionError","ConnectionRefusedError","logError","err","req","console","log","next","ormHandleError","error","message","name","InvalidConnectionError","res","status","json","errors","errorHandler","errorName","notFoundErrorHandler","exports","module"],"mappings":"0BAKIA,QAAAA,aAJAC,yBAAAA,gBACAC,uBAAAA,cADAD,yBAAAA,gBACAC,gCAAAA,uBACAC,iCAAAA,wBACAC,gCAAAA,uBAOEC,SAAW,SAAAC,EAAAC,EAAXF,EAAYC,GACdE,QAAQC,IAAIH,GACZI,EAAKJ,IAIHK,eAAiB,SAAAL,EAAAC,EAAjBI,EAAAA,GACF,GAMIL,aAAkBH,iBACdS,aAAOR,wBACPS,aAAaC,yBAFjBR,aAAAS,uBAAA,OAAOC,EAAIC,OAAO,KAAKC,KAAK,CAOzBN,MAAA,4BACCK,QAAYC,EAAKJ,OAKxBR,aAAAL,iBALGe,EAAIC,OAAO,KAAKC,KAAK,CAOlBJ,KAAAR,EAAYJ,KACXe,QAAYC,EAAKL,QACXP,OADWA,EAAAa,SAKxBb,aAAAJ,eALGc,EAAIC,OAAO,KAAKC,KAAK,CAMzBJ,KAAAR,EAAAQ,KAGJD,QAAAP,EAAAO,QANYM,OAAQb,EAAIa,SAQpBH,EAAIC,IAMRG,aAAA,SAAAd,EAAAC,EAAAS,GANIA,EAAIC,OAAOX,EAAIW,QAAU,KAAKC,KAAK,CAC/BN,MAAON,EAAIe,UAMbC,QAAAA,EAAAA,SAANA,qBAAA,SAAAf,EAAAS,GACIA,EAAIC,OAAO,KAAKC,KAAK,CAQlBK,MAAP,YACIlB,QAAAA,oEADJmB,OAAOD,QAAU,CACblB,SAAAA,SACAM,eAAAA,eACAS,aAAAA,aACAE,qBAAAA","file":"errors.middleware.min.js","sourcesContent":["const {\r\n    ValidationError,\r\n    DatabaseError,\r\n    ConnectionError,\r\n    ConnectionRefusedError,\r\n    ConnectionTimedOutError,\r\n    InvalidConnectionError\r\n} = require('sequelize');\r\n\r\n\r\n// Middleware para loggear errors\r\nconst logError = (err, req, res, next) => {\r\n    console.log(err);\r\n    next(err);\r\n}\r\n\r\n//middleware para gestionar el error de ORM\r\nconst ormHandleError = (err, req, res, next) => {\r\n    if (\r\n        err instanceof ConnectionError ||\r\n        err instanceof ConnectionRefusedError ||\r\n        err instanceof ConnectionTimedOutError ||\r\n        err instanceof InvalidConnectionError\r\n    ) {\r\n        return res.status(409).json({\r\n            error: 'Database connection error',\r\n            message: err.name,\r\n        })\r\n    }\r\n\r\n\r\n    if (err instanceof ValidationError) {\r\n        res.status(400).json({\r\n            name: err.name,\r\n            message: err.message,\r\n            errors: err.errors\r\n        })\r\n    }\r\n\r\n    if (err instanceof DatabaseError) {\r\n        res.status(409).json({\r\n            name: err.name,\r\n            message: err.message,\r\n            errors: err.errors,\r\n        })\r\n    }\r\n    next(err);\r\n}\r\n\r\n// midleware error general\r\nconst errorHandler = (err, req, res, next) => {\r\n    res.status(err.status || 500).json({\r\n        error: err.errorName,\r\n        message: err.error\r\n    })\r\n}\r\n\r\n//manejar el error 404\r\nconst notFoundErrorHandler = (req, res, next) => {\r\n    res.status(404).json({\r\n        error: 'Not Found',\r\n        message: \"El backend se encuentra trabajando, pronto tendremos esta ruta\"\r\n    })\r\n\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    logError,\r\n    ormHandleError,\r\n    errorHandler,\r\n    notFoundErrorHandler,\r\n}\r\n"]}