{"version":3,"sources":["errors.middleware.js"],"names":["require","ValidationError","DatabaseError","ConnectionError","ConnectionRefusedError","ConnectionTimedOutError","InvalidConnectionError","logError","err","req","res","next","console","log","ormHandleError","status","json","error","message","name","errors","errorHandler","errorName","notFoundErrorHandler","module","exports"],"mappings":";;eAOIA,OAAO,CAAC,WAAD,C;IANPC,e,YAAAA,e;IACAC,a,YAAAA,a;IACAC,e,YAAAA,e;IACAC,sB,YAAAA,sB;IACAC,uB,YAAAA,uB;IACAC,sB,YAAAA,sB,EAIJ;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACAG,EAAAA,IAAI,CAACH,GAAD,CAAJ;AACH,CAHD,C,CAKA;;;AACA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACN,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC5C,MACIH,GAAG,YAAYL,eAAf,IACAK,GAAG,YAAYJ,sBADf,IAEAI,GAAG,YAAYH,uBAFf,IAGAG,GAAG,YAAYF,sBAJnB,EAKE;AACE,WAAOI,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,MAAAA,KAAK,EAAE,2BADiB;AAExBC,MAAAA,OAAO,EAAEV,GAAG,CAACW;AAFW,KAArB,CAAP;AAIH;;AAGD,MAAIX,GAAG,YAAYP,eAAnB,EAAoC;AAChCS,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBG,MAAAA,IAAI,EAAEX,GAAG,CAACW,IADO;AAEjBD,MAAAA,OAAO,EAAEV,GAAG,CAACU,OAFI;AAGjBE,MAAAA,MAAM,EAAEZ,GAAG,CAACY;AAHK,KAArB;AAKH;;AAED,MAAIZ,GAAG,YAAYN,aAAnB,EAAkC;AAC9BQ,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBG,MAAAA,IAAI,EAAEX,GAAG,CAACW,IADO;AAEjBD,MAAAA,OAAO,EAAEV,GAAG,CAACU,OAFI;AAGjBE,MAAAA,MAAM,EAAEZ,GAAG,CAACY;AAHK,KAArB;AAKH;;AACDT,EAAAA,IAAI,CAACH,GAAD,CAAJ;AACH,CA9BD,C,CAgCA;;;AACA,IAAMa,YAAY,GAAG,SAAfA,YAAe,CAACb,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC1CD,EAAAA,GAAG,CAACK,MAAJ,CAAWP,GAAG,CAACO,MAAJ,IAAc,GAAzB,EAA8BC,IAA9B,CAAmC;AAC/BC,IAAAA,KAAK,EAAET,GAAG,CAACc,SADoB;AAE/BJ,IAAAA,OAAO,EAAEV,GAAG,CAACS;AAFkB,GAAnC;AAIH,CALD,C,CAOA;;;AACA,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACd,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7CD,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,IAAAA,KAAK,EAAE,WADU;AAEjBC,IAAAA,OAAO,EAAE;AAFQ,GAArB;AAKH,CAND;;AASAM,MAAM,CAACC,OAAP,GAAiB;AACblB,EAAAA,QAAQ,EAARA,QADa;AAEbO,EAAAA,cAAc,EAAdA,cAFa;AAGbO,EAAAA,YAAY,EAAZA,YAHa;AAIbE,EAAAA,oBAAoB,EAApBA;AAJa,CAAjB","sourcesContent":["const {\r\n    ValidationError,\r\n    DatabaseError,\r\n    ConnectionError,\r\n    ConnectionRefusedError,\r\n    ConnectionTimedOutError,\r\n    InvalidConnectionError\r\n} = require('sequelize');\r\n\r\n\r\n// Middleware para loggear errors\r\nconst logError = (err, req, res, next) => {\r\n    console.log(err);\r\n    next(err);\r\n}\r\n\r\n//middleware para gestionar el error de ORM\r\nconst ormHandleError = (err, req, res, next) => {\r\n    if (\r\n        err instanceof ConnectionError ||\r\n        err instanceof ConnectionRefusedError ||\r\n        err instanceof ConnectionTimedOutError ||\r\n        err instanceof InvalidConnectionError\r\n    ) {\r\n        return res.status(409).json({\r\n            error: 'Database connection error',\r\n            message: err.name,\r\n        })\r\n    }\r\n\r\n\r\n    if (err instanceof ValidationError) {\r\n        res.status(400).json({\r\n            name: err.name,\r\n            message: err.message,\r\n            errors: err.errors\r\n        })\r\n    }\r\n\r\n    if (err instanceof DatabaseError) {\r\n        res.status(409).json({\r\n            name: err.name,\r\n            message: err.message,\r\n            errors: err.errors,\r\n        })\r\n    }\r\n    next(err);\r\n}\r\n\r\n// midleware error general\r\nconst errorHandler = (err, req, res, next) => {\r\n    res.status(err.status || 500).json({\r\n        error: err.errorName,\r\n        message: err.error\r\n    })\r\n}\r\n\r\n//manejar el error 404\r\nconst notFoundErrorHandler = (req, res, next) => {\r\n    res.status(404).json({\r\n        error: 'Not Found',\r\n        message: \"El backend se encuentra trabajando, pronto tendremos esta ruta\"\r\n    })\r\n\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    logError,\r\n    ormHandleError,\r\n    errorHandler,\r\n    notFoundErrorHandler,\r\n}\r\n"],"file":"errors.middleware.dev.js"}